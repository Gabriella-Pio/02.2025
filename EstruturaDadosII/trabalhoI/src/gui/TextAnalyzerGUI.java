// src/gui/TextAnalyzerGUI.java

package gui;

import javax.swing.*;

import arvore.AVLTree;
import arvore.BSTree;
import arvore.NodeInfo;
import arvore.TreeStats;
import tokenizer.TextTokenizer;
import vetor.DynamicWordFrequencyVector;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

/**
 * CLASSE PRINCIPAL DA INTERFACE GR√ÅFICA
 *
 * Esta √© a "janela m√£e" que coordena todos os componentes.
 * Pense nela como o "maestro" de uma orquestra - ela organiza
 * e conecta todos os outros componentes da interface.
 */
public class TextAnalyzerGUI extends JFrame {

    // ====== COMPONENTES DA INTERFACE ======
    // Estes s√£o os "pain√©is" que comp√µem nossa janela
    private FilePanel filePanel; // Painel para sele√ß√£o de arquivo
    private ConfigPanel configPanel; // Painel de configura√ß√µes
    private ResultsPanel resultsPanel; // Painel para mostrar resultados
    private JProgressBar progressBar; // Barra de progresso

    // ====== DADOS DA APLICA√á√ÉO ======
    private File selectedFile; // Arquivo selecionado pelo usu√°rio

    /**
     * CONSTRUTOR - √â executado quando criamos a janela
     * Aqui "montamos" nossa interface pe√ßa por pe√ßa
     */
    public TextAnalyzerGUI() {
        // Primeiro: configurar a janela principal
        setupWindow();

        // Segundo: criar todos os componentes
        createComponents();

        // Terceiro: organizar os componentes na tela
        layoutComponents();

        // Quarto: conectar os eventos (cliques, etc.)
        setupEventHandlers();
    }

    /**
     * CONFIGURA√á√ÉO DA JANELA PRINCIPAL
     * Aqui definimos t√≠tulo, tamanho, comportamento ao fechar, etc.
     */
    private void setupWindow() {
        // T√≠tulo que aparece na barra superior
        setTitle("üìä Analisador de Texto - √Årvores Bin√°rias");

        // O que acontece quando o usu√°rio clica no X
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Tamanho da janela (largura x altura)
        setSize(1440, 900);

        // Centralizar na tela
        setLocationRelativeTo(null);

        // Permitir redimensionamento
        setResizable(true);

        // Definir tamanho m√≠nimo
        setMinimumSize(new Dimension(1200, 800));
    }

    /**
     * CRIA√á√ÉO DOS COMPONENTES
     * Aqui "fabricamos" cada pe√ßa da nossa interface
     */
    private void createComponents() {
        // Criar o painel de sele√ß√£o de arquivo
        filePanel = new FilePanel();

        // Criar o painel de configura√ß√µes
        configPanel = new ConfigPanel();

        // Criar o painel de resultados
        resultsPanel = new ResultsPanel();

        // Criar a barra de progresso
        progressBar = new JProgressBar();
        progressBar.setStringPainted(true); // Mostrar texto na barra
        progressBar.setVisible(false); // Inicialmente invis√≠vel
    }

    /**
     * ORGANIZA√á√ÉO DOS COMPONENTES (LAYOUT)
     * Aqui decidimos ONDE cada componente fica na tela
     *
     * Usamos BorderLayout - imagine a tela dividida em 5 regi√µes:
     * NORTE (NORTH) - parte superior
     * SUL (SOUTH) - parte inferior
     * LESTE (EAST) - lado direito
     * OESTE (WEST) - lado esquerdo
     * CENTRO (CENTER) - meio (pega o espa√ßo restante)
     */
    private void layoutComponents() {
        // Usar BorderLayout para organizar
        setLayout(new BorderLayout(10, 10)); // 10px de espa√ßo entre componentes

        // Painel superior - combina sele√ß√£o de arquivo + configura√ß√µes
        JPanel topPanel = createTopPanel();
        add(topPanel, BorderLayout.NORTH);

        // Centro - resultados (pega a maior parte do espa√ßo)
        add(resultsPanel, BorderLayout.CENTER);

        // Parte inferior - barra de progresso
        add(progressBar, BorderLayout.SOUTH);

        // Adicionar uma "moldura" interna de 15px
        ((JComponent) getContentPane()).setBorder(
                BorderFactory.createEmptyBorder(15, 15, 15, 15));
    }

    /**
     * CRIAR PAINEL SUPERIOR
     * Combina o painel de arquivo + painel de configura√ß√µes
     * em um s√≥ painel vertical
     */
    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout(5, 5));

        // Arquivo vai no topo
        topPanel.add(filePanel, BorderLayout.NORTH);

        // Configura√ß√µes v√£o embaixo
        topPanel.add(configPanel, BorderLayout.CENTER);

        return topPanel;
    }

    /**
     * CONFIGURA√á√ÉO DOS EVENTOS
     * Aqui "ensinamos" o que fazer quando o usu√°rio interage
     * com a interface (clica em bot√µes, etc.)
     */
    private void setupEventHandlers() {

        // ====== EVENTO: Arquivo selecionado ======
        filePanel.setFileSelectionListener(new FileSelectionListener() {
            @Override
            public void onFileSelected(File file) {
                try {
                    TextTokenizer tokenizer = new TextTokenizer("src/resources/stopwords.txt");
                    tokenizer.loadTextFile(file.getAbsolutePath());

                    // String[] palavras = tokenizer.tokenizeToArray(tokenizer.TEXT);

                    // // Aqui voc√™ pode chamar os algoritmos
                    // DynamicWordFrequencyVector vetor = new DynamicWordFrequencyVector();
                    // TreeStats statsVetor = vetor.buildWithStats(palavras);

                    // E atualizar a ResultsPanel, por exemplo
                    // resultsPanel.showResults(vetor, statsVetor);

                    // Quando um arquivo √© selecionado...
                    selectedFile = file;

                    // Habilitar o bot√£o de an√°lise
                    configPanel.setAnalyzeButtonEnabled(true);

                    // Mostrar mensagem de sucesso
                    showMessage("‚úÖ Arquivo selecionado: " + file.getName());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,
                            "Erro ao processar arquivo: " + e.getMessage(),
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void onFileSelectionCancelled() {
                // Se o usu√°rio cancelou a sele√ß√£o...
                showMessage("‚ùå Sele√ß√£o de arquivo cancelada");
            }
        });

        // ====== EVENTO: Bot√£o de an√°lise clicado ======
        configPanel.setAnalyzeButtonListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Quando o bot√£o "Analisar" √© clicado...
                startAnalysis();
            }
        });
    }

    /**
     * INICIAR AN√ÅLISE
     * Este m√©todo seria chamado quando o usu√°rio quer analisar o arquivo
     */
    private void startAnalysis() {
        if (selectedFile == null) {
            showError("‚ùå Por favor, selecione um arquivo primeiro!");
            return;
        }

        // Mostrar barra de progresso
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true); // Anima√ß√£o cont√≠nua
        progressBar.setString("üîç Analisando arquivo...");

        // Desabilitar bot√£o durante an√°lise
        configPanel.setAnalyzeButtonEnabled(false);

        // Limpar resultados anteriores
        resultsPanel.clearResults();

        // Aqui voc√™ conectaria com seu backend
        // Por enquanto, vamos simular uma an√°lise
        // simulateAnalysis();

        SwingWorker<Void, String> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                try {
                    TextTokenizer tokenizer = new TextTokenizer("src/resources/stopwords.txt");
                    tokenizer.loadTextFile(selectedFile.getAbsolutePath());
                    String[] palavras = tokenizer.tokenizeToArray(tokenizer.TEXT);

                    int escolha = configPanel.getSelectedStructureIndex();

                    if (escolha == 0) { // Vetor din√¢mico
                        publish("Executando Vetor Din√¢mico...");
                        DynamicWordFrequencyVector vetor = new DynamicWordFrequencyVector();
                        TreeStats stats = vetor.buildWithStats(palavras);
                        resultsPanel.addHeader("Resultados - Vetor Din√¢mico");
                        resultsPanel.showWordFrequencies(vetor.getFrequenciesAsList());
                        resultsPanel.showAnalysis(stats, "Vetor Din√¢mico");

                    } else if (escolha == 1) { // BST
                        publish("Executando √Årvore BST...");
                        BSTree bst = new BSTree();
                        TreeStats stats = bst.buildWithStats(palavras);
                        resultsPanel.addHeader("Resultados - BST");
                        resultsPanel.showWordFrequencies(bst.getFrequenciesAsList());
                        resultsPanel.showAnalysis(stats, "BST");
                        resultsPanel.showTree(bst.getNodesWithLevel());

                    } else if (escolha == 2) { // AVL
                        publish("Executando √Årvore AVL...");
                        AVLTree avl = new AVLTree();
                        TreeStats stats = avl.buildWithStats(palavras);

                        // CORRIGIR REFER√äNCIAS CIRCULARES ANTES DE USAR
                        // avl.fixCircularReferences();

                        // // Verificar refer√™ncias circulares
                        // avl.checkForCircularReferences();

                        // DEBUG: Verificar dados

                        int alturaCalculada = avl.getAltura();
                        int alturaReportada = stats.getAltura();
                        System.out.println("Altura calculada: " + alturaCalculada);
                        System.out.println("Altura reportada: " + alturaReportada);

                        if (alturaCalculada != alturaReportada) {
                            System.out.println("‚ùå ERRO: Altura inconsistente!");
                        }

                        List<String> frequencies = avl.getFrequenciesAsList();
                        List<NodeInfo> nodes = avl.getNodesWithLevel();

                        System.out.println("AVL - Frequ√™ncias: " + frequencies.size());
                        System.out.println("AVL - N√≥s: " + nodes.size());
                        // fim DEBUG

                        resultsPanel.addHeader("Resultados - AVL");
                        resultsPanel.showWordFrequencies(avl.getFrequenciesAsList());
                        resultsPanel.showAnalysis(stats, "AVL");
                        resultsPanel.showTree(avl.getNodesWithLevel());
                    }

                    publish("‚úÖ An√°lise conclu√≠da!");

                } catch (Exception e) {
                    publish("‚ùå Erro durante an√°lise: " + e.getMessage());
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void process(java.util.List<String> chunks) {
                for (String message : chunks) {
                    resultsPanel.addResult(message);
                }
            }

            @Override
            protected void done() {
                progressBar.setVisible(false);
                configPanel.setAnalyzeButtonEnabled(true);
            }
        };

        worker.execute();
    }

    /**
     * SIMULA√á√ÉO DE AN√ÅLISE
     * Simula o processamento para demonstrar a interface
     */
    private void simulateAnalysis() {
        // Criar uma tarefa em background para n√£o travar a interface
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Simular processamento...
                publish("üöÄ Iniciando an√°lise do arquivo: " + selectedFile.getName());
                Thread.sleep(1000); // Simular 1 segundo de processamento

                publish("üìä Executando Busca Bin√°ria...");
                Thread.sleep(800);

                publish("üå≥ Executando BST...");
                Thread.sleep(900);

                publish("‚öñÔ∏è Executando AVL...");
                Thread.sleep(700);

                publish("‚úÖ An√°lise conclu√≠da!");

                return null;
            }

            @Override
            protected void process(java.util.List<String> chunks) {
                // Atualizar a interface com mensagens
                for (String message : chunks) {
                    resultsPanel.addResult(message);
                }
            }

            @Override
            protected void done() {
                // Quando terminar...
                progressBar.setVisible(false);
                configPanel.setAnalyzeButtonEnabled(true);
                showMessage("üéâ An√°lise conclu√≠da com sucesso!");
            }
        };

        worker.execute();
    }

    /**
     * M√âTODOS AUXILIARES PARA MOSTRAR MENSAGENS
     */
    private void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Informa√ß√£o",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Erro",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * M√âTODO MAIN - PONTO DE ENTRADA DO PROGRAMA
     * √â aqui que tudo come√ßa!
     */
    public static void main(String[] args) {
        // SwingUtilities.invokeLater garante que a interface
        // seja criada na thread correta (EDT - Event Dispatch Thread)
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    // Usar a apar√™ncia do sistema operacional
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                // Criar e mostrar a janela
                new TextAnalyzerGUI().setVisible(true);
            }
        });
    }
}