// src/gui/ConfigPanel.java

package gui;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;

/**
 * PAINEL DE CONFIGURA√á√ïES
 *
 * Este painel permite ao usu√°rio:
 * 1. Escolher qual estrutura usar para mostrar as frequ√™ncias
 * 2. Iniciar a an√°lise do texto
 * 3. Configurar modo passo a passo (para √°rvores)
 *
 * √â como o "painel de controle" da nossa aplica√ß√£o.
 */
public class ConfigPanel extends JPanel {

    // ====== COMPONENTES VISUAIS ======
    private JComboBox<String> structureComboBox; // Lista suspensa para escolher estrutura
    private JButton analyzeButton; // Bot√£o para iniciar an√°lise
    private JLabel instructionLabel; // Label com instru√ß√µes

    // Componentes para modo passo a passo
    private JCheckBox stepByStepCheckBox; // Checkbox para ativar modo passo a passo
    private JLabel speedLabel; // Label para controle de velocidade
    private JSlider speedSlider; // Slider para ajustar velocidade

    // Controles de execu√ß√£o passo a passo
    private JButton playButton; // Bot√£o play
    private JButton pauseButton; // Bot√£o pause
    private JButton nextButton; // Bot√£o next (pr√≥ximo passo)
    private JButton stopButton; // Bot√£o stop

    private JPanel stepPanel; // Painel para op√ß√µes de passo a passo
    private JPanel controlPanel; // Painel para controles de execu√ß√£o

    /**
     * CONSTRUTOR
     * Monta o painel de configura√ß√µes
     */
    public ConfigPanel() {
        createComponents(); // Cria os componentes
        layoutComponents(); // Organiza o layout
        customizeComponents(); // Personaliza apar√™ncia
        setupInteractions(); // Configura intera√ß√µes
    }

    /**
     * CRIAR COMPONENTES
     * "Fabricar" cada elemento do painel
     */
    private void createComponents() {
        // Label com instru√ß√µes
        instructionLabel = new JLabel("Escolha a estrutura para exibir as frequ√™ncias:");
        instructionLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));

        // ComboBox (lista suspensa) com as op√ß√µes de estrutura
        String[] structures = {
                "üîç Busca Bin√°ria (Vetor Din√¢mico)",
                "üå≥ √Årvore Bin√°ria Simples (BST)",
                "‚öñÔ∏è √Årvore AVL (Balanceada)"
        };
        structureComboBox = new JComboBox<>(structures);
        structureComboBox.setSelectedIndex(0); // Selecionar a primeira op√ß√£o por padr√£o

        // Bot√£o para iniciar an√°lise
        analyzeButton = new JButton("üöÄ Analisar Texto");
        analyzeButton.setEnabled(false); // Inicialmente desabilitado (sem arquivo selecionado)

        // Componentes para modo passo a passo (inicialmente n√£o vis√≠veis)
        stepByStepCheckBox = new JCheckBox("Montar passo a passo");
        // speedLabel = new JLabel("Velocidade (ms):");

        // Controles de velocidade (comentados para vers√£o simplificada)
        // speedSlider = new JSlider(50, 2000, 500); // 50‚Äì2000 ms
        // speedSlider.setPaintTicks(true);
        // speedSlider.setPaintLabels(true);
        // speedSlider.setMajorTickSpacing(500);
        // speedSlider.setMinorTickSpacing(50);
        // speedSlider.setEnabled(false);

        // Bot√µes de controle de execu√ß√£o
        playButton = new JButton("‚ñ∂ Play");
        pauseButton = new JButton("‚è∏ Pause");
        nextButton = new JButton("‚è≠ Next");
        stopButton = new JButton("‚èπ Stop");

        // Inicialmente desabilitados
        playButton.setEnabled(false);
        pauseButton.setEnabled(false);
        nextButton.setEnabled(false);
        stopButton.setEnabled(false);

        // Pain√©is para agrupar componentes
        stepPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 6, 0));
        controlPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 6, 0));
    }

    /**
     * ORGANIZAR COMPONENTES (LAYOUT)
     * Decidir onde cada componente fica dentro deste painel
     */
    private void layoutComponents() {
        // Usar FlowLayout para organizar em linha
        setLayout(new FlowLayout(FlowLayout.LEFT, 12, 8));

        // Adicionar borda com t√≠tulo
        setBorder(new TitledBorder("‚öôÔ∏è Configura√ß√µes de An√°lise"));

        // Adicionar componentes na ordem
        add(instructionLabel);
        add(structureComboBox);

        // Adicionar componentes de passo a passo ao painel
        stepPanel.add(stepByStepCheckBox);
        // stepPanel.add(speedLabel);
        // stepPanel.add(speedSlider);
        add(stepPanel);

        // Adicionar bot√µes de controle ao painel
        controlPanel.add(playButton);
        controlPanel.add(pauseButton);
        controlPanel.add(nextButton);
        controlPanel.add(stopButton);
        add(controlPanel);

        // Adicionar bot√£o principal de an√°lise
        add(analyzeButton);

        // Inicialmente ocultar pain√©is de controle
        stepPanel.setVisible(false);
        controlPanel.setVisible(false);
    }

    /**
     * PERSONALIZAR COMPONENTES
     * Ajustar cores, fontes, tamanhos, etc.
     */
    private void customizeComponents() {
        // Configurar combobox
        structureComboBox.setPreferredSize(new Dimension(300, 30));
        structureComboBox.setBackground(Color.WHITE);

        // Configurar bot√£o de an√°lise
        analyzeButton.setPreferredSize(new Dimension(160, 36));
        analyzeButton.setBackground(new Color(40, 167, 69)); // Verde
        analyzeButton.setForeground(Color.WHITE);
        analyzeButton.setFocusPainted(false);
        analyzeButton.setBorderPainted(false);
        analyzeButton.setOpaque(true);
        analyzeButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));

        // Configura√ß√µes de slider (comentadas)
        // speedSlider.setPreferredSize(new Dimension(250, 50));
    }

    /**
     * CONFIGURAR INTERA√á√ïES
     * Definir comportamentos para eventos dos componentes
     */
    private void setupInteractions() {
        // Exibir ou ocultar painel de passo-a-passo dependendo da estrutura
        structureComboBox.addItemListener(e -> {
            if (getSelectedStructureIndex() == 0) { // Vetor (n√£o suporta passo a passo)
                stepPanel.setVisible(false);
                controlPanel.setVisible(false);
                stepByStepCheckBox.setSelected(false);
            } else { // √Årvores (suportam passo a passo)
                stepPanel.setVisible(true);
                controlPanel.setVisible(stepByStepCheckBox.isSelected());
            }
            revalidate();
            repaint();
        });

        // Mostrar/ocultar controles quando checkbox for alterado
        stepByStepCheckBox.addItemListener(e -> {
            boolean on = e.getStateChange() == ItemEvent.SELECTED;
            // speedSlider.setEnabled(on);
            controlPanel.setVisible(on);
        });
    }

    // ===== M√âTODOS P√öBLICOS PARA CONTROLE EXTERNO =====

    /**
     * Define listener para o bot√£o de an√°lise
     * 
     * @param listener ActionListener para o bot√£o
     */
    public void setAnalyzeButtonListener(ActionListener listener) {
        for (ActionListener l : analyzeButton.getActionListeners())
            analyzeButton.removeActionListener(l);
        analyzeButton.addActionListener(listener);
    }

    /**
     * Define listeners para os bot√µes de controle
     */
    public void setPlayListener(ActionListener l) {
        playButton.addActionListener(l);
    }

    public void setPauseListener(ActionListener l) {
        pauseButton.addActionListener(l);
    }

    public void setNextListener(ActionListener l) {
        nextButton.addActionListener(l);
    }

    public void setStopListener(ActionListener l) {
        stopButton.addActionListener(l);
    }

    /**
     * Habilita/desabilita bot√µes de controle
     * 
     * @param enable true para habilitar, false para desabilitar
     */
    public void enableControlButtons(boolean enable) {
        playButton.setEnabled(enable);
        pauseButton.setEnabled(enable);
        nextButton.setEnabled(enable);
        stopButton.setEnabled(enable);
    }

    /**
     * Habilita/desabilita bot√£o de an√°lise com feedback visual
     * 
     * @param enabled true para habilitar, false para desabilitar
     */
    public void setAnalyzeButtonEnabled(boolean enabled) {
        analyzeButton.setEnabled(enabled);
        if (enabled) {
            analyzeButton.setBackground(new Color(40, 167, 69)); // Verde
            analyzeButton.setText("üöÄ Analisar Texto");
        } else {
            analyzeButton.setBackground(Color.GRAY); // Cinza
            analyzeButton.setText("‚è≥ Selecione um arquivo primeiro");
        }
    }

    /**
     * Obt√©m √≠ndice da estrutura selecionada
     * 
     * @return 0=Vetor, 1=BST, 2=AVL
     */
    public int getSelectedStructureIndex() {
        return structureComboBox.getSelectedIndex();
    }

    /**
     * Verifica se modo passo a passo est√° habilitado
     * 
     * @return true se habilitado, false caso contr√°rio
     */
    public boolean isStepByStepEnabled() {
        return stepByStepCheckBox.isSelected();
    }

    /**
     * Habilita/desabilita toda a configura√ß√£o durante an√°lise
     * 
     * @param enabled true para habilitar, false para desabilitar
     */
    public void setConfigurationEnabled(boolean enabled) {
        structureComboBox.setEnabled(enabled);
        stepByStepCheckBox.setEnabled(enabled);
        // speedSlider.setEnabled(enabled && stepByStepCheckBox.isSelected());
        enableControlButtons(false);

        if (!enabled) {
            analyzeButton.setText("‚è≥ Analisando...");
            analyzeButton.setBackground(Color.ORANGE); // Laranja durante an√°lise
        } else if (analyzeButton.isEnabled()) {
            analyzeButton.setText("üöÄ Analisar Texto");
            analyzeButton.setBackground(new Color(40, 167, 69)); // Verde
        }
    }
}