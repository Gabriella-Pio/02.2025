package gui;
    import javax.swing.*;
    import javax.swing.border.TitledBorder;
    import java.awt.*;

    /**
     * PAINEL DE RESULTADOS
     *
     * Este painel √© respons√°vel por mostrar os resultados da an√°lise:
     * - Performance das estruturas de dados
     * - Frequ√™ncia das palavras
     * - Mensagens de status
     *
     * √â como a "tela de TV" da nossa aplica√ß√£o onde tudo √© exibido.
     */
    public class ResultsPanel extends JPanel {

        // ====== COMPONENTES VISUAIS ======
        private JTextArea textArea;           // √Årea de texto para mostrar resultados
        private JScrollPane scrollPane;       // Painel com barra de rolagem
        private JButton clearButton;          // Bot√£o para limpar resultados
        private JButton exportButton;         // Bot√£o para exportar resultados

        /**
         * CONSTRUTOR
         * Monta o painel de resultados
         */
        public ResultsPanel() {
            createComponents();
            layoutComponents();
            customizeComponents();
            setupEventHandlers();
        }

        /**
         * CRIAR COMPONENTES
         * "Fabricar" cada elemento do painel
         */
        private void createComponents() {
            // √Årea de texto principal
            textArea = new JTextArea();
            textArea.setEditable(false); // Usu√°rio n√£o pode editar
            textArea.setText("üîç Selecione um arquivo e clique em 'Analisar' para ver os resultados...\n");

            // Painel com barra de rolagem
            scrollPane = new JScrollPane(textArea);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            // Bot√µes de a√ß√£o
            clearButton = new JButton("üóëÔ∏è Limpar Resultados");
            exportButton = new JButton("üíæ Exportar Resultados");
        }

        /**
         * ORGANIZAR COMPONENTES (LAYOUT)
         * Decidir onde cada componente fica dentro deste painel
         */
        private void layoutComponents() {
            // Usar BorderLayout para organizar
            setLayout(new BorderLayout(5, 5));

            // Adicionar borda com t√≠tulo
            setBorder(new TitledBorder("üìä Resultados da An√°lise"));

            // √Årea de texto ocupa o centro (maior espa√ßo)
            add(scrollPane, BorderLayout.CENTER);

            // Painel de bot√µes na parte inferior
            JPanel buttonPanel = createButtonPanel();
            add(buttonPanel, BorderLayout.SOUTH);
        }

        /**
         * CRIAR PAINEL DE BOT√ïES
         * Organizar os bot√µes horizontalmente
         */
        private JPanel createButtonPanel() {
            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));

            // Adicionar bot√µes
            buttonPanel.add(clearButton);
            buttonPanel.add(exportButton);

            return buttonPanel;
        }

        /**
         * PERSONALIZAR COMPONENTES
         * Ajustar apar√™ncia, cores, fontes, etc.
         */
        private void customizeComponents() {
            // Personalizar √°rea de texto
            textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12)); // Fonte monoespa√ßada (como terminal)
            textArea.setBackground(new Color(248, 249, 250)); // Cinza muito claro
            textArea.setForeground(Color.BLACK);
            textArea.setMargin(new Insets(10, 10, 10, 10)); // Margem interna
            textArea.setLineWrap(true);      // Quebrar linhas longas
            textArea.setWrapStyleWord(true); // Quebrar por palavras, n√£o por caracteres

            // Personalizar barra de rolagem
            scrollPane.setPreferredSize(new Dimension(0, 400)); // Altura m√≠nima
            scrollPane.getVerticalScrollBar().setUnitIncrement(16); // Rolagem mais suave

            // Personalizar bot√µes
            customizeButton(clearButton, new Color(220, 53, 69), Color.WHITE); // Vermelho
            customizeButton(exportButton, new Color(0, 123, 255), Color.WHITE); // Azul
        }

        /**
         * PERSONALIZAR UM BOT√ÉO
         * M√©todo auxiliar para aplicar estilo aos bot√µes
         */
        private void customizeButton(JButton button, Color backgroundColor, Color textColor) {
            button.setBackground(backgroundColor);
            button.setForeground(textColor);
            button.setFocusPainted(false);
            button.setBorderPainted(false);
            button.setOpaque(true);
            button.setPreferredSize(new Dimension(150, 30));
            button.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 11));

            // Adicionar efeito hover
            addButtonHoverEffect(button, backgroundColor);
        }

        /**
         * ADICIONAR EFEITO HOVER AOS BOT√ïES
         * Bot√µes ficam mais escuros quando o mouse passa sobre eles
         */
        private void addButtonHoverEffect(JButton button, Color originalColor) {
            // Calcular cor mais escura (diminui RGB em 20%)
            Color hoverColor = new Color(
                    Math.max(0, (int)(originalColor.getRed() * 0.8)),
                    Math.max(0, (int)(originalColor.getGreen() * 0.8)),
                    Math.max(0, (int)(originalColor.getBlue() * 0.8))
            );

            button.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    button.setBackground(hoverColor);
                }

                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    button.setBackground(originalColor);
                }
            });
        }

        /**
         * CONFIGURAR EVENTOS
         * Definir o que acontece quando os bot√µes s√£o clicados
         */
        private void setupEventHandlers() {
            // Evento do bot√£o "Limpar"
            clearButton.addActionListener(e -> clearResults());

            // Evento do bot√£o "Exportar"
            exportButton.addActionListener(e -> exportResults());
        }

        /**
         * LIMPAR RESULTADOS
         * Apagar todo o conte√∫do da √°rea de texto
         */
        public void clearResults() {
            textArea.setText("üîç Resultados limpos. Pronto para nova an√°lise...\n");

            // Rolar para o topo
            textArea.setCaretPosition(0);
        }

        /**
         * EXPORTAR RESULTADOS
         * Salvar o conte√∫do em um arquivo
         */
        private void exportResults() {
            // Verificar se h√° conte√∫do para exportar
            String content = textArea.getText().trim();
            if (content.isEmpty() || content.contains("Selecione um arquivo")) {
                JOptionPane.showMessageDialog(this,
                        "‚ùå N√£o h√° resultados para exportar!",
                        "Erro", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Abrir di√°logo para salvar arquivo
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Salvar Resultados da An√°lise");
            fileChooser.setSelectedFile(new java.io.File("analise_resultados.txt"));

            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    java.io.File file = fileChooser.getSelectedFile();
                    java.io.FileWriter writer = new java.io.FileWriter(file);
                    writer.write(content);
                    writer.close();

                    JOptionPane.showMessageDialog(this,
                            "‚úÖ Resultados exportados com sucesso!\nüìÑ " + file.getName(),
                            "Exporta√ß√£o Conclu√≠da", JOptionPane.INFORMATION_MESSAGE);

                } catch (java.io.IOException e) {
                    JOptionPane.showMessageDialog(this,
                            "‚ùå Erro ao salvar arquivo: " + e.getMessage(),
                            "Erro de Exporta√ß√£o", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        /**
         * ADICIONAR RESULTADO
         * M√©todo para outras classes adicionarem texto aos resultados
         */
        public void addResult(String text) {
            textArea.append(text + "\n");

            // Auto-scroll para o final
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }

        /**
         * ADICIONAR M√öLTIPLAS LINHAS
         * Adicionar v√°rias linhas de uma vez
         */
        public void addResults(String[] lines) {
            for (String line : lines) {
                addResult(line);
            }
        }

        /**
         * DEFINIR CONTE√öDO COMPLETO
         * Substituir todo o conte√∫do atual
         */
        public void setResults(String content) {
            textArea.setText(content);
            textArea.setCaretPosition(0); // Rolar para o topo
        }

        /**
         * OBTER CONTE√öDO ATUAL
         * Permitir que outras classes leiam o conte√∫do
         */
        public String getResults() {
            return textArea.getText();
        }

        /**
         * VERIFICAR SE H√Å RESULTADOS
         * √ötil para valida√ß√µes
         */
        public boolean hasResults() {
            String content = textArea.getText().trim();
            return !content.isEmpty() && !content.contains("Selecione um arquivo");
        }

        /**
         * ADICIONAR SEPARADOR VISUAL
         * M√©todo auxiliar para adicionar linhas divis√≥rias
         */
        public void addSeparator() {
            addResult("‚ïê".repeat(80));
        }

        /**
         * ADICIONAR CABE√áALHO
         * M√©todo auxiliar para adicionar t√≠tulos formatados
         */
        public void addHeader(String title) {
            addResult("");
            addResult("üìã " + title.toUpperCase());
            addResult("‚îÄ".repeat(Math.min(80, title.length() + 10)));
        }

        /**
         * MOSTRAR MENSAGEM DE STATUS
         * Para mostrar progresso durante a an√°lise
         */
        public void showStatus(String message) {
            addResult("‚è≥ " + message);
        }

        /**
         * MOSTRAR MENSAGEM DE SUCESSO
         * Para mostrar quando algo deu certo
         */
        public void showSuccess(String message) {
            addResult("‚úÖ " + message);
        }

        /**
         * MOSTRAR MENSAGEM DE ERRO
         * Para mostrar quando algo deu errado
         */
        public void showError(String message) {
            addResult("‚ùå " + message);
        }
    }